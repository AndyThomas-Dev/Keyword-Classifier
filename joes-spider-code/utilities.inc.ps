% utilities.inc.ps: Library functions for writing Postscript

% String String -> String
/concat {
    exch dup length
    2 index length add string
    dup dup 4 2 roll copy length
    4 -1 roll putinterval
}
bind def

% String -> Num
/stringheight {
    1 dict begin
    /text exch def
    gsave
    {                            
        (HXQ) true charpath pathbbox       % gets text path bounding box (LLx LLy URx URy)
	exch pop 3 -1 roll pop            % keeps LLy and URy
	exch sub                          % URy - LLy
    }
    stopped                               % did the last block fail?
    {
	pop pop                           % get rid of "stopped" junk
        currentfont /FontMatrix get 3 get % gets alternative text height
    }
    if
    grestore
    end
} bind def

% String -> ()
/show-centered {
    3 dict begin
    /text exch def

    gsave
    text stringwidth pop 2 div neg
    text stringheight 2 div neg
    rmoveto
    
    text show
    
    grestore
} bind def

% Num Num -> Num
/maximum {
    2 dict begin
    /a exch def
    /b exch def
    a b gt { a } { b } ifelse
    end
} bind def

% [Num] -> Num
/amaximum {
    aload length 1 sub {maximum} repeat
} bind def

% Num Num -> Bool
/minimum {
    2 dict begin
    /a exch def
    /b exch def
    a b gt { b } { a } ifelse
    end
} bind def

% [Num] -> Num
/aminimum {
    aload length 1 sub {minimum} repeat
} bind def

% [Int] -> Int
/sum {
    aload
    length 1 sub
    {add} repeat
} bind def

% [Num] -> [Num]
/normalize {
    1 dict begin
    /xs exch def
    /ys xs length array def
    xs dup sum /total exch def
    { total div } forall
    ys astore
    end
} def

% Clear the stack
/clearstack { count {pop} repeat } def

([INFO] Loaded utilities.inc.ps\n) print
